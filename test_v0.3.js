/*@__PURE__*/import{connect}from'cloudflare:sockets';
const d=new TextDecoder(),e=new TextEncoder();
const I='123456',UUID='63d60ca2-c97f-44c1-a000-10af1d5406f5',P=['1.1.1.1','8.8.8.8','1.0.0.1'],R='sjc.o00o.ooo',N=0,N2='优选';
const U=((u,a=new Uint8Array(16),j=0)=>{for(let i=0;i<u.length;i+=2)a[j++]=parseInt(u.substr(i,2),16);return a})(UUID.replace(/-/g,''));
const chk=b=>(b[0]^U[0])|(b[1]^U[1])|(b[2]^U[2])|(b[3]^U[3])|(b[4]^U[4])|(b[5]^U[5])|(b[6]^U[6])|(b[7]^U[7])|(b[8]^U[8])|(b[9]^U[9])|(b[10]^U[10])|(b[11]^U[11])|(b[12]^U[12])|(b[13]^U[13])|(b[14]^U[14])|(b[15]^U[15])?0:1;
const to64=ip=>'2001:67c:2960:6464::'+((o,p)=>{for(let i=0;i<4;i++)o[i]=+p[i];return((o[0]<<8)|o[1]).toString(16).padStart(4,'0')+':'+((o[2]<<8)|o[3]).toString(16).padStart(4,'0')})(new Uint8Array(4),ip.split('.'));
const tryConn=async(h,p,c,init)=>{try{const s=await connect({hostname:h,port:p});return await s.opened,{tcpSocket:s,initialData:init}}catch{}if(N&&((c=h.charCodeAt(0))>47&&c<58))try{return await tryConn(to64(h),p,{...c,N:0},init)}catch{}const[h2,p2]=R.split(':');return await tryConn(h2,+p2||p,{...c},init)};
const parseV=async(buf,c)=>{const a=new Uint8Array(buf),t=a[17],p=(a[18+t+1]<<8)|a[18+t+2];let o=18+t+4,h='',x,l;switch(a[o-1]){case 1:h=`${a[o++]}.${a[o++]}.${a[o++]}.${a[o++]}`;break;case 2:l=a[o++];h=d.decode(a.subarray(o,o+l));o+=l;break;case 3:for(x=0;x<8;x++)h+=(x?':':'')+((a[o+2*x]<<8)|a[o+2*x+1]).toString(16);o+=16}return await tryConn(h,p,c,buf.slice(o))};
const tunnel=(ws,tcp,init)=>{const w=tcp.writable.getWriter();ws.send(new Uint8Array([0,0]));init&&w.write(init);let b=[],t,c=0;const cleanup=()=>c?0:(c=1,t&&clearTimeout(t),b=null,w.releaseLock(),tcp.close());ws.addEventListener('message',({data})=>{if(c)return;const chunk=data instanceof ArrayBuffer?new Uint8Array(data):typeof data==='string'?e.encode(data):data;b.push(chunk),t||(t=setTimeout(()=>{if(c)return;const total=b.length===1?b[0]:((len=b.reduce((s,x)=>s+x.length,0),o=new Uint8Array(len),pos=0)=>{for(const x of b)o.set(x,pos),pos+=x.length;return o})();w.write(total).catch(cleanup),b.length=0,t=null},5))});tcp.readable.pipeTo(new WritableStream({write:d=>ws.send(d),close:cleanup,abort:cleanup})).catch(cleanup);ws.addEventListener('close',cleanup)};
const conf=h=>P.concat([`${h}:443`]).map(x=>{const[raw,name=N2]=x.split('#'),[addr,port=443]=raw.split(':');return`vless://${UUID}@${addr}:${port}?encryption=none&security=tls&type=ws&host=${h}&sni=${h}&path=%2F%3Fed%3D2560#${name}`}).join('\n');
export default{async fetch(req,env){const url=new URL(req.url),h=req.headers.get('Host');if(req.headers.get('Upgrade')!=='websocket'){const path=url.pathname;return path===`/${I}`?new Response(`订阅地址: https://${h}/${I}/vless`):path===`/${I}/vless`?new Response(conf(h)):new Response('Hello Worker!')}try{const proto=req.headers.get('sec-websocket-protocol'),data=Uint8Array.from(atob(proto.replace(/-/g,'+').replace(/_/g,'/')),c=>c.charCodeAt(0));if(!chk(data.subarray(1,17)))return new Response('无效UUID',{status:403});const{tcpSocket,initialData}=await parseV(data.buffer,{N}),[client,server]=new WebSocketPair();return server.accept(),tunnel(server,tcpSocket,initialData),new Response(null,{status:101,webSocket:client})}catch(e){return new Response('连接失败: '+e.message,{status:502})}}};
